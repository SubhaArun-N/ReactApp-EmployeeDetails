{"version":3,"sources":["EmployeeDetails.js","Employees.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["EmployeeDetails","props","state","this","getEmployeeDetails","val","prevProps","id","axios","get","then","response","setState","employeeDetails","className","bsStyle","Heading","Title","componentClass","data","name","Body","email","phone","city","country","organization","jobProfile","additionalInfo","Component","Employees","selectedEmployee","getEmployeeData","employeeList","style","margin","map","employee","key","onClick","App","console","log","basename","process","src","logo","alt","exact","path","render","to","component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.79158f79.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport Panel from 'react-bootstrap/lib/Panel'\r\nimport axios from 'axios'\r\nimport { Right } from 'react-bootstrap/lib/Media';\r\n\r\n//This Component is a child Component of Customers Component\r\nexport default class EmployeeDetails extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {}\r\n  }\r\n\r\n  //Function which is called when the component loads for the first time\r\n  componentDidMount() {\r\n    this.getEmployeeDetails(this.props.val)\r\n  }\r\n\r\n  //Function which is called whenver the component is updated\r\n  componentDidUpdate(prevProps) {\r\n\r\n    //get Customer Details only if props has changed\r\n    if (this.props.val !== prevProps.val) {\r\n      this.getEmployeeDetails(this.props.val)\r\n    }\r\n  }\r\n\r\n  //Function to Load the customerdetails data from json.\r\n  getEmployeeDetails(id) {\r\n    axios.get('assets/json-response/employee' + id + '.json').then(response => {\r\n      this.setState({employeeDetails: response})\r\n    })\r\n  };\r\n\r\n  render() {\r\n    if (!this.state.employeeDetails)\r\n      return (<p>Loading Data</p>)\r\n    return (<div className=\"employeeDetails\">\r\n      <Panel bsStyle=\"info\" className=\"centeralign\" >\r\n        <Panel.Heading>\r\n          <Panel.Title componentClass=\"h3\">{this.state.employeeDetails.data.name}</Panel.Title>\r\n        </Panel.Heading>\r\n        <Panel.Body>\r\n          <p>Name : {this.state.employeeDetails.data.name}</p>\r\n          <p>Email : {this.state.employeeDetails.data.email}</p>\r\n          <p>Phone : {this.state.employeeDetails.data.phone}</p>\r\n          <p>City : {this.state.employeeDetails.data.city}</p>\r\n          <p>State : {this.state.employeeDetails.data.state}</p>\r\n          <p>Country : {this.state.employeeDetails.data.country}</p>\r\n          <p>Organization : {this.state.employeeDetails.data.organization}</p>\r\n          <p>Job Profile : {this.state.employeeDetails.data.jobProfile}</p>\r\n          <p>Additional Info : {this.state.employeeDetails.data.additionalInfo}</p>\r\n        </Panel.Body>\r\n      </Panel>\r\n    </div>)\r\n  }\r\n}","import React, {Component} from 'react';\r\nimport Panel from 'react-bootstrap/lib/Panel'\r\nimport Button from 'react-bootstrap/lib/Button'\r\nimport EmployeeDetails from './EmployeeDetails'\r\nimport axios from 'axios'\r\n\r\nexport default class Employees extends Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      selectedEmployee: 1\r\n    }\r\n  }\r\n\r\n  //function which is called the first time the component loads\r\n  componentDidMount() {\r\n    this.getEmployeeData();\r\n  }\r\n\r\n  //Function to get the Customer Data from json\r\n  getEmployeeData() {\r\n    axios.get('assets/json-response/employeeList.json').then(response => {\r\n      this.setState({employeeList: response})\r\n    })\r\n  };\r\n\r\n  render() {\r\n    if (!this.state.employeeList)\r\n      return (<p>Loading data</p>)\r\n    return (<div className=\"addmargin\" style={{\r\n      margin:\"20px\"\r\n    }}>\r\n      <div className=\"col-md-3\">\r\n        {\r\n\r\n          this.state.employeeList.data.map(employee => <Panel bsStyle=\"info\" key={employee.name} className=\"centeralign\">\r\n            <Panel.Heading>\r\n              <Panel.Title componentClass=\"h3\">{employee.name}</Panel.Title>\r\n            </Panel.Heading>\r\n            <Panel.Body>\r\n              <p>{employee.email}</p>\r\n              <p>{employee.phone}</p>\r\n              <Button bsStyle=\"info\" onClick={() => this.setState({selectedEmployee: employee.id})}>\r\n\r\n                Click to View Details\r\n\r\n              </Button>\r\n\r\n            </Panel.Body>\r\n          </Panel>)\r\n        }\r\n      </div>\r\n      <div className=\"col-md-6\">\r\n        <EmployeeDetails val={this.state.selectedEmployee}/>\r\n      </div>\r\n    </div>)\r\n  }\r\n\r\n}","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Switch, Route, Redirect} from 'react-router-dom';\nimport logo from './logo.svg';\nimport Employees from './Employees';\n\nimport './App.css';\n\nclass App extends Component{\n  render(){\n    console.log(\"host url\"+process.env.PUBLIC_URL);\n    return (\n      <Router basename={process.env.PUBLIC_URL}>\n        <div className=\"App\">\n        <header className=\"App-header\">  \n          <img src={logo} className=\"App-logo\" alt=\"logo\" />       \n          <h1 className=\"App-title\">React App to display employee details</h1>\n        </header>       \n\n        <Switch>\n          <Route exact path=\"/\" render={() => (\n            <Redirect to=\"/employeeList\"></Redirect>\n          )}>\n          </Route>\n\n          <Route exact path=\"/employeeList\" component={Employees}></Route>\n\n        </Switch>  \n      </div>\n      </Router>        \n    \n    );    \n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App></App>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}